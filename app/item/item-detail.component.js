"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var forms_1 = require("@angular/forms");
var router_1 = require("@angular/router");
var application_settings_1 = require("application-settings");
var item_service_1 = require("./item.service");
var platform_1 = require("platform");
var ItemDetailComponent = /** @class */ (function () {
    function ItemDetailComponent(route, itemService) {
        this.route = route;
        this.itemService = itemService;
    }
    ItemDetailComponent.prototype.ngOnInit = function () {
        var id = this.route.snapshot.params["form_name"];
        this.forms = JSON.parse(application_settings_1.getString("studyForms"));
        this.form = this.forms.filter(function (form) { return form.form_name === id; })[0];
        this.fields = this.form.fields;
        //this.fields = new ObservableArray(this.form.fields);
        this.myForm = this.toFormGroup(this.form.fields);
    };
    ItemDetailComponent.prototype.parseResponses = function (response) {
        var pattern = "{(.*)";
        for (var i = 0; i < response.length; i++) {
            if (response[i] != null) {
                if (response[i].match(pattern) != null) {
                    var search = "{" + response[i].match(pattern)[1];
                    response[i] = response[i].replace(search, "");
                }
            }
        }
        return response;
    };
    ItemDetailComponent.prototype.toFormGroup = function (questions) {
        var _this = this;
        var group = {};
        questions.forEach(function (question) {
            question.select_labels = _this.parseResponses(question.select_labels);
            group[question.field_name] = new forms_1.FormControl(question.field_name);
            group[question.field_name].value = "";
            if (question.field_name == "name") {
                group[question.field_name].value = "Enter your name";
            }
        });
        return new forms_1.FormGroup(group);
    };
    ItemDetailComponent.prototype.getNextrecord_id = function () {
        return this.itemService.getRecordID().map(function (fields) {
            if (fields.length == 0) {
                return 1;
            }
            else {
                return Math.max.apply(Math, fields.map(function (o) { return o.record_id; })) + 1;
            }
        });
    };
    ItemDetailComponent.prototype.saveRegistration = function () {
        var _this = this;
        this.getNextrecord_id().subscribe(function (fields) {
            _this.myForm.value.record_id = fields;
            _this.myForm.value.uuid = platform_1.device.uuid;
            var myPackage = [];
            myPackage.push(_this.myForm.value);
            _this.itemService.saveData(JSON.stringify(myPackage)).subscribe(function (fields) {
                if (fields.count == 1) {
                    var users = [];
                    if (application_settings_1.hasKey("Users")) {
                        users = JSON.parse(application_settings_1.getString("Users"));
                    }
                    var user = JSON.parse("{\"record_id\":\"" + fields + "\",\"name\":\"" + _this.myForm.value.name + "\",\"uuid\":\"" + platform_1.device.uuid + "\"active\":false}");
                    users.push(user);
                    application_settings_1.setString("Users", JSON.stringify(users));
                }
            });
        });
    };
    ItemDetailComponent.prototype.submit = function () {
        if (this.form.form_name == "registration") {
            this.saveRegistration();
        }
    };
    ItemDetailComponent = __decorate([
        core_1.Component({
            selector: "ns-details",
            moduleId: module.id,
            templateUrl: "./item-detail.component.html",
            styleUrls: ["./item-detail.css"]
        }),
        __metadata("design:paramtypes", [router_1.ActivatedRoute, item_service_1.ItemService])
    ], ItemDetailComponent);
    return ItemDetailComponent;
}());
exports.ItemDetailComponent = ItemDetailComponent;
//# sourceMappingURL=data:application/json;base64,